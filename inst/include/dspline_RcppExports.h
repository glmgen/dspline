// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_dspline_RCPPEXPORTS_H_GEN_
#define RCPP_dspline_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace dspline {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("dspline", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("dspline", "_dspline_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in dspline");
            }
        }
    }

    inline Eigen::SparseMatrix<double> rcpp_b_mat(int k, NumericVector xd, bool tf_weighting, IntegerVector row_idx, bool d_only) {
        typedef SEXP(*Ptr_rcpp_b_mat)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_b_mat p_rcpp_b_mat = NULL;
        if (p_rcpp_b_mat == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_b_mat)(int,NumericVector,bool,IntegerVector,bool)");
            p_rcpp_b_mat = (Ptr_rcpp_b_mat)R_GetCCallable("dspline", "_dspline_rcpp_b_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_b_mat(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(tf_weighting)), Shield<SEXP>(Rcpp::wrap(row_idx)), Shield<SEXP>(Rcpp::wrap(d_only)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline Eigen::SparseMatrix<double> rcpp_h_mat(int k, NumericVector xd, bool di_weighting, IntegerVector col_idx) {
        typedef SEXP(*Ptr_rcpp_h_mat)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_h_mat p_rcpp_h_mat = NULL;
        if (p_rcpp_h_mat == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_h_mat)(int,NumericVector,bool,IntegerVector)");
            p_rcpp_h_mat = (Ptr_rcpp_h_mat)R_GetCCallable("dspline", "_dspline_rcpp_h_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_h_mat(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(di_weighting)), Shield<SEXP>(Rcpp::wrap(col_idx)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline Eigen::SparseMatrix<double> rcpp_n_mat(int k, NumericVector xd, bool normalized, IntegerVector knot_idx) {
        typedef SEXP(*Ptr_rcpp_n_mat)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_n_mat p_rcpp_n_mat = NULL;
        if (p_rcpp_n_mat == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_n_mat)(int,NumericVector,bool,IntegerVector)");
            p_rcpp_n_mat = (Ptr_rcpp_n_mat)R_GetCCallable("dspline", "_dspline_rcpp_n_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_n_mat(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(normalized)), Shield<SEXP>(Rcpp::wrap(knot_idx)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline Eigen::SparseMatrix<double> rcpp_h_eval(int k, NumericVector xd, NumericVector x, IntegerVector col_idx) {
        typedef SEXP(*Ptr_rcpp_h_eval)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_h_eval p_rcpp_h_eval = NULL;
        if (p_rcpp_h_eval == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_h_eval)(int,NumericVector,NumericVector,IntegerVector)");
            p_rcpp_h_eval = (Ptr_rcpp_h_eval)R_GetCCallable("dspline", "_dspline_rcpp_h_eval");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_h_eval(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(col_idx)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline Eigen::SparseMatrix<double> rcpp_n_eval(int k, NumericVector xd, NumericVector x, bool normalized, IntegerVector knot_idx) {
        typedef SEXP(*Ptr_rcpp_n_eval)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_n_eval p_rcpp_n_eval = NULL;
        if (p_rcpp_n_eval == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_n_eval)(int,NumericVector,NumericVector,bool,IntegerVector)");
            p_rcpp_n_eval = (Ptr_rcpp_n_eval)R_GetCCallable("dspline", "_dspline_rcpp_n_eval");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_n_eval(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(normalized)), Shield<SEXP>(Rcpp::wrap(knot_idx)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline Eigen::SparseMatrix<double> rcpp_n_eval_precomputed(int k, NumericVector xd, NumericVector x, IntegerVector knot_idx, Eigen::SparseMatrix<double> n_mat) {
        typedef SEXP(*Ptr_rcpp_n_eval_precomputed)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_n_eval_precomputed p_rcpp_n_eval_precomputed = NULL;
        if (p_rcpp_n_eval_precomputed == NULL) {
            validateSignature("Eigen::SparseMatrix<double>(*rcpp_n_eval_precomputed)(int,NumericVector,NumericVector,IntegerVector,Eigen::SparseMatrix<double>)");
            p_rcpp_n_eval_precomputed = (Ptr_rcpp_n_eval_precomputed)R_GetCCallable("dspline", "_dspline_rcpp_n_eval_precomputed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_n_eval_precomputed(Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(knot_idx)), Shield<SEXP>(Rcpp::wrap(n_mat)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::SparseMatrix<double> >(rcpp_result_gen);
    }

    inline void rcpp_dot_b_mat_mult(NumericVector v, int k, NumericVector xd, bool tf_weighting, bool transpose, bool inverse) {
        typedef SEXP(*Ptr_rcpp_dot_b_mat_mult)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_dot_b_mat_mult p_rcpp_dot_b_mat_mult = NULL;
        if (p_rcpp_dot_b_mat_mult == NULL) {
            validateSignature("void(*rcpp_dot_b_mat_mult)(NumericVector,int,NumericVector,bool,bool,bool)");
            p_rcpp_dot_b_mat_mult = (Ptr_rcpp_dot_b_mat_mult)R_GetCCallable("dspline", "_dspline_rcpp_dot_b_mat_mult");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_dot_b_mat_mult(Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(tf_weighting)), Shield<SEXP>(Rcpp::wrap(transpose)), Shield<SEXP>(Rcpp::wrap(inverse)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void rcpp_dot_h_mat_mult(NumericVector v, int k, NumericVector xd, bool di_weighting, bool transpose, bool inverse) {
        typedef SEXP(*Ptr_rcpp_dot_h_mat_mult)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_dot_h_mat_mult p_rcpp_dot_h_mat_mult = NULL;
        if (p_rcpp_dot_h_mat_mult == NULL) {
            validateSignature("void(*rcpp_dot_h_mat_mult)(NumericVector,int,NumericVector,bool,bool,bool)");
            p_rcpp_dot_h_mat_mult = (Ptr_rcpp_dot_h_mat_mult)R_GetCCallable("dspline", "_dspline_rcpp_dot_h_mat_mult");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_dot_h_mat_mult(Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(di_weighting)), Shield<SEXP>(Rcpp::wrap(transpose)), Shield<SEXP>(Rcpp::wrap(inverse)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline NumericVector rcpp_d_mat_mult(NumericVector v, int k, NumericVector xd, bool tf_weighting, bool transpose) {
        typedef SEXP(*Ptr_rcpp_d_mat_mult)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_d_mat_mult p_rcpp_d_mat_mult = NULL;
        if (p_rcpp_d_mat_mult == NULL) {
            validateSignature("NumericVector(*rcpp_d_mat_mult)(NumericVector,int,NumericVector,bool,bool)");
            p_rcpp_d_mat_mult = (Ptr_rcpp_d_mat_mult)R_GetCCallable("dspline", "_dspline_rcpp_d_mat_mult");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_d_mat_mult(Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(tf_weighting)), Shield<SEXP>(Rcpp::wrap(transpose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector rcpp_b_mat_mult(NumericVector v, int k, NumericVector xd, bool tf_weighting, bool transpose, bool inverse) {
        typedef SEXP(*Ptr_rcpp_b_mat_mult)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_b_mat_mult p_rcpp_b_mat_mult = NULL;
        if (p_rcpp_b_mat_mult == NULL) {
            validateSignature("NumericVector(*rcpp_b_mat_mult)(NumericVector,int,NumericVector,bool,bool,bool)");
            p_rcpp_b_mat_mult = (Ptr_rcpp_b_mat_mult)R_GetCCallable("dspline", "_dspline_rcpp_b_mat_mult");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_b_mat_mult(Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(tf_weighting)), Shield<SEXP>(Rcpp::wrap(transpose)), Shield<SEXP>(Rcpp::wrap(inverse)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector rcpp_h_mat_mult(NumericVector v, int k, NumericVector xd, bool di_weighting, bool transpose, bool inverse) {
        typedef SEXP(*Ptr_rcpp_h_mat_mult)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_h_mat_mult p_rcpp_h_mat_mult = NULL;
        if (p_rcpp_h_mat_mult == NULL) {
            validateSignature("NumericVector(*rcpp_h_mat_mult)(NumericVector,int,NumericVector,bool,bool,bool)");
            p_rcpp_h_mat_mult = (Ptr_rcpp_h_mat_mult)R_GetCCallable("dspline", "_dspline_rcpp_h_mat_mult");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_h_mat_mult(Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(xd)), Shield<SEXP>(Rcpp::wrap(di_weighting)), Shield<SEXP>(Rcpp::wrap(transpose)), Shield<SEXP>(Rcpp::wrap(inverse)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_dspline_RCPPEXPORTS_H_GEN_
